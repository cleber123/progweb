=======
Summaeh
=======

================================================================================

Admin baseada no material.frontend

O objetivo desta sprint é implementar a interface admin para o Summaeh

- [x] Integração básica do material.frontend
- [?] Transformar os forms do site em form materialize
- [ ] CRUD de vídeos
- [ ] CRUD de eventos
- [ ] Grupos/permissões: padrão do django + pemissão criar eventos
- [ ] Cadastro de novos usuários
- [ ] Eventos podem ter vários administradores + um dono (ForeignKey + ManyToManyField)

================================================================================
    
Vídeos selecionados de um evento

- [ ] Admin/dono do evento define quais vídeos vão para votação
- [ ] Usuários votam nos vídeos (um voto por usuário, sem votos anônimos)
- [ ] Sistema opcional c/ voto baseado em chave secreta 
      (só quem sabe a chave pode votar e dono define a chave. A idéia é que
      o professor define a chave em sala de aula e só que está presente 
      consegue votar)
- [ ] Usuário pode votar e "desvotar"
- [ ] Professor pode fechar a votação
- [ ] Segundo turno de votação (somente os 2 primeiros são escolhidos)
 

================================================================================

      
==========
Codeschool
==========

================================================================================

Sparta rankear integrantes

O objetivo desta sprint é permitir que os alunos avaliem a efetividade da 
participação dos colegas.

- [ ] Aluno pode dar a nota para cada integrante do grupo (1-5 estrelas)
- [ ] Aluno pode ver a média da nota recebida
- [ ] Professor pode ver a grade de notas de cada aluno em cada grupo
- [ ] Professor pode ver planilha de todos os alunos com suas respectivas notas
- [ ] Planilha deve conter indicação visual de quem colaborou (3+) ou não (2-)
 
================================================================================
 
Sparta planilha de notas

O objetivo desta sprint é permitir que o professor insira notas para cada membro
do grupo sparta. 

- [ ] Professor sobe uma lista de notas iniciais com um arquivo csv
- [ ] Professor pode modificar notas desta lista (Django FormSets)
- [ ] Professor confirma notas e o sistema distribui os grupos (mockado)
- [ ] Professor sobe as notas finais dos alunos após segunda avaliação (CSV ou editado)
      e sistema calcula nota final. 

    
================================================================================

Bricks-query (EDA bricks)

Implementar funções de query e manipulação de "DOM" o bricks. A inspiração
principal da API deve ser jQuery (com adaptações p/ Python) e em seguida os 
QuerySets do Django. A API do DOM do Javascript deve ser ostensivamente 
evitada :)

O método Brick.query() retorna um objeto do tipo Query que terá uma API semelhante
ao jQuery. 

    brick.query(seletor)  <==>  $(seletor, brick) 
 
Api fluida

    brick.query(".foo").filter("p").add_class("bar")
    ==
    $(".foo", elem).filter("p").addClass("bar")
       
    
Tudo se baseia no ponto de entrada Brick.query(selector) e Brick.get(seletor). 
Cria um QuerySet de bricks com os filhos que satisfazem um determinado seletor.

- [ ] Brick.query("#id") --> seletor de id.
- [ ] Brick.query("tag") --> filtra todos bricks de uma dada tag.
- [ ] Brick.query(".class") --> filtra todos bricks de uma dada classe.
- [ ] Brick.query("S1 > S2") --> filtra todos bricks que obedecem o seletor S2 
      que são filhos diretos de S1.
- [ ] Brick.query("S1 S2") --> filtra todos bricks que obedecem o seletor S2 
      que são filhos (não necessariamente filhos diretos) de S1.
- [ ] Query.filter("S1") --> filtra todos os bricks do query que satisfazem o seletor dado 
- [ ] Brick.get(seletor) funciona como Brick.query(), mas retorna o primeiro 
      elemento válido. Retorna None caso não exista elemento. 

    


================================================================================




Em aberto...


* Completar sistema de cadastro de usuários
    - Trocar password
    - Trocar e-mail
    - Editar profile

* Codeschool blog:
    - Blog pessoal p/ cada usuário
    - Criar novos posts
    - Mostrar posts
    - Contagem de likes
    - Comentários

* Bricks-json
    - Converter bricks p/ JSON (existe um quase spec definido)
    - Converter json p/ bricks

* Bricks-dom (js)
    - Converter JSON em elementos DOM
    - Integrar com jQuery

